using PdfGenerator.Application.Models;

namespace PdfGenerator.Test.HtmlTemplateToPdf.Commands;

[TestClass]
public class UpdateTemplateCommandHandler
{
    [Test]
    public async Task Handler_Should_Successful_Update_Template()
    {
        // Arrange
        var aExpectedResult = true;
        var dataContextMock = await DatabaseContext.GetDatabaseContext();

        var aTemplateId = dataContextMock.HtmlTemplates.FirstOrDefault()!.Id;

        var aTemplateToUpdate = new HtmlTemplateModel()
        {
            Name = "updated_template",
            Content = "<p>Welcome [new_employee_name]</p>",
            AdditionalContext = "Disclaimer: This template has been generated by unit test."
        };

        var aCommand = new UpdateHtmlTemplateCommand(aTemplateId, aTemplateToUpdate);
        var handler = new UpdateHtmlTemplateHandler(dataContextMock);
        
        // Act 
        var result = handler.Handle(aCommand, default);
        
        // Assert
        Assert.Multiple(() =>
        {
            Assert.That(result.Result.Succeeded, Is.EqualTo(aExpectedResult));
            Assert.That(result.Result.Data, Is.EqualTo(aTemplateId));
        });
    }

    [Test]
    public async Task Command_WhenTemplateNameIsNotUnique_ReturnInvalidOperationException()
    {
        // Arrange
        var dataContextMock = await DatabaseContext.GetDatabaseContext(); 
        var aTemplateId = dataContextMock.HtmlTemplates.FirstOrDefault()!.Id;

        var aTemplateToUpdate = new HtmlTemplateModel()
        {
            Name = "testTemplate2",
            Content = "<p>Welcome [new_employee_name]</p>",
            AdditionalContext = "Disclaimer: This template has been generated by unit test."
        };

        var aCommand = new UpdateHtmlTemplateCommand(aTemplateId, aTemplateToUpdate);
        var handler = new UpdateHtmlTemplateHandler(dataContextMock);
        
        // Act and Assert
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await handler.Handle(aCommand, CancellationToken.None);
        });
    }
    
    [Test]
    public async Task Command_WhenTemplateNotFound_ReturnKeyNotFoundException()
    {
        // Arrange
        var dataContextMock = await DatabaseContext.GetDatabaseContext();
        var aTemplateId = Guid.NewGuid();
 
        var aTemplateToUpdate = new HtmlTemplateModel()
        {
            Name = "testTemplate2",
            Content = "<p>Welcome [new_employee_name]</p>",
            AdditionalContext = "Disclaimer: This template has been generated by unit test."
        };

        var aCommand = new UpdateHtmlTemplateCommand(aTemplateId, aTemplateToUpdate);
        var handler = new UpdateHtmlTemplateHandler(dataContextMock);
        
        // Act and Assert
        Assert.ThrowsAsync<KeyNotFoundException>(async () =>
        {
            await handler.Handle(aCommand, CancellationToken.None);
        });
    }
    
    [Test]
    public async Task Command_WhenTemplateNameIsEmpty_ReturnTemplateNameRequired()
    {
       
        // Arrange
        var expectedErrorMessage = "Name is required.";
        var aTemplateId = Guid.NewGuid();
        var aTemplateToUpdate = new HtmlTemplateModel()
        {
            Name = "",
            Content = "<p>Welcome [new_employee_name]</p>",
            AdditionalContext = "Disclaimer: This template has been generated by unit test."
        };
        var command = new UpdateHtmlTemplateCommand(aTemplateId, aTemplateToUpdate);         
        var validator = new UpdateHtmlTemplateCommandValidator(); 

        // Act
        var validationResult = await validator.ValidateAsync(command);
        
        // Assert
        Assert.IsFalse(validationResult.IsValid);
        Assert.AreEqual(1, validationResult.Errors.Count); 
        Assert.That(validationResult.Errors[0].ErrorMessage, Is.EqualTo(expectedErrorMessage));
    }

    [Test]
    public async Task Command_WhenTemplateContentIsEmpty_ReturnContentIsRequired()
    {
        // Arrange
        var expectedErrorMessage = "Content is required.";
        var aTemplateId = Guid.NewGuid();
        var aTemplateToUpdate = new HtmlTemplateModel()
        {
            Name = "testTemplate",
            Content = "",
            AdditionalContext = "Disclaimer: This template has been generated by unit test."
        };
        var command = new UpdateHtmlTemplateCommand(aTemplateId, aTemplateToUpdate);         
        var validator = new UpdateHtmlTemplateCommandValidator(); 

        // Act
        var validationResult = validator.Validate(command);
        
        // Assert
        Assert.IsFalse(validationResult.IsValid);
        Assert.AreEqual(1, validationResult.Errors.Count); 
        Assert.That(validationResult.Errors[0].ErrorMessage, Is.EqualTo(expectedErrorMessage));
    }
    
}